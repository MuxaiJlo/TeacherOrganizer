@model TeacherOrganizer.Models.AuthModels.RegisterModel
@{
    ViewData["Title"] = "Register";
}
<link rel="stylesheet" href="~/css/auth.css" />

<body>
    <svg class="wave" viewBox="0 0 1440 400">
        <path fill="#FFA07A" fill-opacity="1"
              d="M0,200L80,180C160,160,320,120,480,150C640,180,800,260,960,275C1120,290,1280,240,1360,220L1440,200V400H0Z">
        </path>
    </svg>

    <div class="d-flex-center">
        <div class="register-container p-4 shadow rounded">
            <h2 class="text-center">Create an Account</h2>
            <p class="text-center text-muted">Join us and start organizing your lessons!</p>

            <form id="registerForm">
                <div class="mb-3">
                    <label for="FirstName" class="form-label">First Name</label>
                    <input type="text" id="FirstName" name="FirstName" class="form-control" required />
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label for="LastName" class="form-label">Last Name</label>
                    <input type="text" id="LastName" name="LastName" class="form-control" required />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label for="Username" class="form-label">Username</label>
                    <input type="text" id="Username" name="Username" class="form-control" required />
                    <span asp-validation-for="Username" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label for="Email" class="form-label">Email</label>
                    <input type="email" id="Email" name="Email" class="form-control" required />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="mb-3 position-relative">
                    <label for="Password" class="form-label">Password</label>
                    <input type="password" id="Password" name="Password" class="form-control" required />
                    <button type="button" id="togglePassword" class="toggle-password-btn" tabindex="-1" aria-label="Show password">
                        👁
                    </button>
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <div class="mb-3 position-relative">
                    <label for="ConfirmPassword" class="form-label">ConfirmPassword</label>
                    <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control" required />
                    <button type="button" id="toggleConfirmPassword" class="toggle-password-btn" tabindex="-1" aria-label="Show password">
                        👁
                    </button>
                    <span class="text-danger" id="confirmPasswordError"></span>
                </div>
                
                <button type="submit" class="btn btn-primary w-100">Register</button>
            </form>

            <div class="text-center mt-3">
                <a href="/AuthView/Login" class="text-decoration-none">Already have an account? Login</a>
            </div>
            <div class="text-center mt-3">
                <a href="/" class="btn btn-outline-secondary w-100">Return to Home</a>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            document.getElementById('registerForm').addEventListener('submit', function (event) {
                event.preventDefault();

                const firstName = document.getElementById('FirstName').value.trim();
                const lastName = document.getElementById('LastName').value.trim();
                const username = document.getElementById('Username').value.trim();
                const email = document.getElementById('Email').value.trim();
                const password = document.getElementById('Password').value.trim();

                let errors = [];

                if (firstName.length < 2 || firstName.length > 50) {
                    errors.push("First name must be between 2 and 50 characters.");
                }

                if (lastName.length < 2 || lastName.length > 50) {
                    errors.push("Last name must be between 2 and 50 characters.");
                }

                if (username.length < 3 || username.length > 50) {
                    errors.push("Username must be between 3 and 50 characters.");
                }

                const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailPattern.test(email)) {
                    errors.push("Please enter a valid email address.");
                }

                const passwordPattern = /^(?=.*[a-zA-Z])(?=.*\d).{6,}$/;
                if (!passwordPattern.test(password)) {
                    errors.push("Password must be at least 6 characters long and contain at least one letter, one number, one symbol");
                }
                            const confirmPassword = document.getElementById('ConfirmPassword').value.trim();
            if (password !== confirmPassword) {
                errors.push("Passwords doesn't matched");
            }
                if (errors.length > 0) {
                    alert(errors.join("\n"));
                    return;
                }

                const formData = {
                    FirstName: firstName,
                    LastName: lastName,
                    Username: username,
                    Email: email,
                    Password: password
                };

                fetch('/api/Auth/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) return response.json().then(err => Promise.reject(err));
                        return response.json();
                    })
                    .then(data => {
                        alert(data.message || 'Registration successful');
                        window.location.href = '/AuthView/Login';
                    })
                    .catch(error => {
                        if (error.errors) {
                            const serverErrors = Object.values(error.errors).flat();
                            alert(serverErrors.join("\n"));
                        } else {
                            alert('Error during registration');
                        }
                    });
            });
                 document.getElementById('togglePassword').addEventListener('click', function () {
                const passwordInput = document.getElementById('Password');
                passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
            });
            document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
                const passwordInput = document.getElementById('ConfirmPassword');
                passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
            });
        </script>
    }

</body>
