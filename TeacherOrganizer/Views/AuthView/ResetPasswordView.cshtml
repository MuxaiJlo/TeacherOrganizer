@model TeacherOrganizer.Models.AuthModels.ResetPasswordModel
@{
    ViewData["Title"] = "Сброс пароля";
    var email = Context.Request.Query["email"];
    var token = Context.Request.Query["token"];
}
<link rel="stylesheet" href="~/css/auth.css" />
<svg class="wave" viewBox="0 0 1440 400">
    <path fill="#FFA07A" fill-opacity="1"
          d="M0,200L80,180C160,160,320,120,480,150C640,180,800,260,960,275C1120,290,1280,240,1360,220L1440,200V400H0Z">
    </path>
</svg>
<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="login-container p-4 shadow rounded">
        <h2 class="text-center">Password reset</h2>
        <form id="resetPasswordForm">
            <input type="hidden" id="Email" name="Email" value="@email" />
            <input type="hidden" id="Token" name="Token" value="@token" />
            <div class="mb-3 position-relative">
                <label for="NewPassword" class="form-label">New password</label>
                <input type="password" id="NewPassword" name="NewPassword" class="form-control" required minlength="6" />
                <button type="button" id="togglePassword" class="toggle-password-btn" tabindex="-1" aria-label="Show password">
                    👁
                </button>
            </div>
            <div class="mb-3 position-relative">
                <label for="ConfirmNewPassword" class="form-label">Confirm new password</label>
                <input type="password" id="ConfirmNewPassword" name="ConfirmNewPassword" class="form-control" required minlength="6" />
                <button type="button" id="toggleConfirmPassword" class="toggle-password-btn" tabindex="-1" aria-label="Show password">
                    👁
                </button>
                <span class="text-danger" id="confirmPasswordError"></span>
            </div>
            <button type="submit" class="btn btn-primary w-100">Change password</button>
        </form>
        <div class="text-center mt-3">
            <a href="/AuthView/Login" class="text-decoration-none">Return to login</a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('togglePassword').addEventListener('click', function () {
            const passwordInput = document.getElementById('NewPassword');
            passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
        });
        document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
            const passwordInput = document.getElementById('ConfirmNewPassword');
            passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
        });

        document.getElementById('resetPasswordForm').addEventListener('submit', function (e) {
            e.preventDefault();
            const email = document.getElementById('Email').value;
            const token = document.getElementById('Token').value;
            const newPassword = document.getElementById('NewPassword').value;
            const confirmPassword = document.getElementById('ConfirmNewPassword').value;
            const errorSpan = document.getElementById('confirmPasswordError');
            errorSpan.textContent = "";

            if (newPassword !== confirmPassword) {
                errorSpan.textContent = "Passwords do not match";
                return;
            }

            fetch('/api/Auth/reset-password', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ Email: email, Token: token, NewPassword: newPassword })
            })
            .then(r => r.json())
            .then(data => {
                if (data.message) {
                    alert(data.message);
                    window.location.href = '/AuthView/Login';
                } else {
                    alert('Error changing password.');
                }
            })
            .catch(() => alert('Error changing password.'));
        });
    </script>
}